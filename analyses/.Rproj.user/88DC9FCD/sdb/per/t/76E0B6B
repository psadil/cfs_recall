{
    "collab_server" : "",
    "contents" : "---\ntitle: \"analyze_tmp\"\nauthor: \"psadil\"\ndate: \"April 25, 2017\"\noutput: html_document\n---\n\n```{r setup, include=FALSE}\nknitr::opts_chunk$set(echo = FALSE)\n\nlibrary(tidyverse)\nlibrary(magrittr)\nlibrary(stringdist)\nlibrary(Hmisc)\nlibrary(extrafontdb)\nlibrary(extrafont)\n\n\ncutoff <- 1\n\nsource(file.path('utils.R'))\ntargets <- read_csv('objectNames_2afc.csv') \n\nout <- list()\nfor (i in 1:dim(targets[1])){\n  out[i] = list(c(targets[i,]$name1, targets[i,]$name2, targets[i,]$name3, targets[i,]$name4, targets[i,]$name5, targets[i,]$name6, targets[i,]$name7, targets[i,]$name8, targets[i,]$name9, targets[i,]$name10))\n}\n\ncbPalette <- c(\"#000000\", \"#E69F00\", \"#56B4E9\", \"#009E73\", \"#F0E442\", \"#0072B2\", \"#D55E00\", \"#CC79A7\")\n\nConditions = c('Not Studied','CFS, Image', 'Binocular, Image')\n\ncolmap <- c('Not Studied'=cbPalette[7]\n            ,'Word'=cbPalette[2]\n            ,'CFS, Image'=cbPalette[3]\n            ,'Binocular, Image'=cbPalette[4])\n\n'%!in%' <- function(x,y)!('%in%'(x,y))\n\n\n```\n\nExemplary participants\nSubject...\n - 2 didn't give any responses during the test\n - 3 left experiment after second list\n - 4 didn't give any responses\n - 5 didn't give any responses\n - 1,6,7 all gave responses\n\n\n\n\n\n```{r loadData}\n\n\n\nfiles <- Sys.glob(file.path(\"data\",\"subject*\",\"CFSRecall\",\"*.csv\"))\nfiles <- files[2:length(files)]\n\nd <- lapply(files, read_csv, col_types=cols(pas_1=col_character(),pas_2=col_character())) %>% \n  bind_rows() %>%\n  select(subject, pas_2, list, trial_test, tType, item_test, pair_test, tType_test, swap_test, mm_answer, response_cue, response_noise, rt_noise) %>%\n  filter(subject %!in% c(3,4,6)) %>%\n  filter(list<8) %>%\n  rename(condition = tType) %>%\n  mutate(targets = out[item_test]) %>%\n  mutate(pas_2 = pas_2[trial_test]) %>%\n  # mutate(targets = sapply(X=targets, FUN=function(x) unname(unlist(x)))) %>%\n  mutate(firstTarget=sapply(X=targets, FUN=function(x) extract2(x,1))) %>%\n  mutate(dl = Map(function(x,y) stringdist(x, y, method=\"dl\"), targets, response_cue)) %>%\n  mutate(minDist = sapply(X=dl, FUN=function(x) min(x, na.rm=TRUE))) %>%\n  mutate(cue_correct = if_else(minDist<cutoff, 1, 0)) %>%\n  mutate(mmm_correct = if_else(mm_answer==response_noise, 1, 0)) %>%\n  mutate(subject = factor(subject)) %>%\n  mutate(list = factor(list)) %>%\n  mutate(condition = replace(condition, condition %in% c('NOT STUDIED','CFS','BINOCULAR'), c('Not Studied','CFS, Image', 'Binocular, Image'))) %>%\n  mutate(condition = factor(condition, levels =c('Not Studied','CFS, Image','Binocular, Image')))\n\n\n```\n\n```{r pas2}\n\nd %>%\n  filter(condition==\"CFS, Image\") %>%\n  ggplot(aes(x=condition, y=pas_2)) +\n  stat_summary(fun.data=\"mean_cl_boot\") +\n  # scale_y_continuous(limits = c(0,1), name = \"pas_2\") +\n  ggsave('name_accuracy_group.png') +\n  facet_grid(subject~.) +\n  ggsave('name_accuracy_sub.png')\n\n\n```\n\n\n```{r naming}\n\n\nd %>%\n  ggplot(aes(x=condition, y=cue_correct)) +\n  stat_summary(fun.data=\"mean_cl_boot\") +\n  scale_y_continuous(limits = c(0,1), name = \"Naming Accuracy\") +\n  theme_classic(base_size = 12, base_family = \"Arial\") +\n  theme(\n    axis.ticks = element_blank()\n    # , legend.key.height = unit(1.5,'lines')\n    , axis.line = element_line(size=1)\n    , plot.margin=margin(rep(0,4))\n  ) +\n  ggsave('name_accuracy_group.png') +\n  facet_grid(subject~.) +\n  ggsave('name_accuracy_sub.png')\n\n\n```\n\n```{r mmm}\n\nd %>%\n  ggplot(aes(x=condition, y=mmm_correct)) +\n  stat_summary(fun.data=\"mean_cl_boot\") +\n  scale_y_continuous(limits = c(0,1), name = \"Match/Mismatch Accuracy\") +\n  ggsave('mmm_accuracy_group.png') +\n  facet_grid(subject~.) +\n  ggsave('mmm_accuracy_sub.png')\n\n```\n\n```{r noise_rt}\n\nlabels <- c('0' = \"Not Named\", '1' = \"Name\")\nlabels_mmm <- c('0' = \"Incorrect\", '1' = \"Correct\")\n\nd %>%\n  filter(mmm_correct %in% c(0,1)) %>%\n  ggplot(aes(x=condition, y=rt_noise, fill=condition)) +\n  scale_y_continuous(limits = c(0,12), name = \"Match/Mismatch RT\") +\n  scale_fill_manual(values=colmap, name= \"Condition\") +\n  geom_violin() +\n  facet_grid(mmm_correct~cue_correct, labeller = labeller(cue_correct = labels, mmm_correct=labels_mmm)) +\n  ggsave('mmm_rt_group.png') +\n  facet_grid(subject~cue_correct, labeller = labeller(cue_correct = labels)) +\n  ggsave('mmm_rt_sub.png')\n\n\nd %>%\n  filter(mmm_correct %in% c(0,1)) %>%\n  ggplot(aes(x=condition, fill=condition)) +\n  scale_y_continuous(name = \"N Trials\") +\n  scale_fill_manual(values=colmap, name= \"Condition\") +\n  geom_bar() +\n  facet_grid(mmm_correct~cue_correct, labeller = labeller(cue_correct = labels, mmm_correct=labels_mmm)) +\n  ggsave('nMMM_group.png') +\n  facet_grid(subject~cue_correct, labeller = labeller(cue_correct = labels)) +\n  ggsave('nMMM_sub.png')\n\n\n```\n",
    "created" : 1493228358955.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1177980626",
    "id" : "76E0B6B",
    "lastKnownWriteTime" : 1495555841,
    "last_content_update" : 1495555842190,
    "path" : "D:/git/behavioral/cfs_recall/analyses/analyze_tmp.Rmd",
    "project_path" : "analyze_tmp.Rmd",
    "properties" : {
        "last_setup_crc32" : ""
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_markdown"
}